# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Development Pipeline

on:
  push:
    branches: [ "develop", "feature/*" ]
  pull_request:
    branches: [ "develop", "feature/*" ]

jobs:
  test:
    name: .NET Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Setup testing database
      run: docker run -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres

    - name: Setup Entity Framework tool
      run: dotnet tool install --global dotnet-ef
      
    - name: Run migrations
      env:
        CONNECTIONSTRINGS__NPGSQL: ${{ secrets.CONNECTIONSTRINGS_NPGSQL_TEST }}
      run: dotnet ef database update --startup-project Whiteboard.Service --project Whiteboard.DataAccess

    - name: Test
      run: dotnet test --no-build --verbosity normal

  sonar-analysis:
    name: SonarQube code analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v2.2.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk-analysis:
    name: Snyk security analysis
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    needs: [test, sonar-analysis]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
  
      - name: Restore dependencies
        run: dotnet restore

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --file=./whiteboard-service.sln

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif